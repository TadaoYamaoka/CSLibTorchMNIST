#include <memory>

extern "C"
{
  void init();
  void train(float *dataset, int64_t *targetset, int dataset_size);
  void test(float* dataset, int64_t* targetset, int dataset_size);
}

const int64_t kTrainBatchSize = 64;

const float sample[] = {
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.309659f,0.92498f,1.26864f,1.26864f,2.00688f,1.26864f,1.28137f,1.26864f,0.301296f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.3733f,0.186742f,2.41418f,2.79603f,2.79603f,2.79603f,2.79603f,2.79603f,2.80876f,2.79603f,2.60511f,1.07772f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.15692f,1.17954f,2.79603f,2.79603f,2.66875f,2.33781f,2.33781f,1.67595f,0.797697f,2.35054f,2.60511f,2.79603f,2.56692f,1.47229f,-0.0550942f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,0.721328f,2.35054f,2.79603f,2.68148f,1.09045f,0.339481f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.339481f,2.18508f,2.59238f,2.54147f,1.2941f,-0.296931f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,1.26864f,2.79603f,2.79603f,1.09045f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,1.72686f,2.79603f,2.79603f,0.186742f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,1.26864f,2.79603f,2.79603f,0.644959f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,1.72686f,2.79603f,2.79603f,1.35774f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.0296377f,2.33781f,2.79603f,2.40145f,0.835882f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,1.72686f,2.79603f,2.79603f,1.71413f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.84861f,2.79603f,2.79603f,2.6942f,1.90505f,0.403122f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,1.72686f,2.79603f,2.79603f,1.71413f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.386028f,0.0976446f,2.33781f,2.79603f,2.79603f,2.70693f,2.50328f,1.84141f,0.975893f,0.975893f,0.975893f,1.19227f,2.70693f,2.79603f,2.79603f,1.06499f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.322387f,0.0849164f,2.43964f,2.79603f,2.79603f,2.79603f,2.79603f,2.80876f,2.79603f,2.79603f,2.79603f,2.79603f,2.79603f,1.65049f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.912252f,1.12863f,2.59238f,1.14136f,2.00688f,1.7014f,1.12863f,2.26144f,2.80876f,2.80876f,0.0340035f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.352209f,2.79603f,2.79603f,0.912252f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.352209f,2.79603f,2.79603f,1.56139f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.352209f,2.79603f,2.79603f,1.56139f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.195105f,2.26144f,2.79603f,2.45237f,0.161286f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,1.59958f,2.79603f,2.79603f,2.47782f,-0.309659f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.504948f,2.79603f,2.79603f,2.79603f,-0.284202f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.284202f,2.27417f,2.79603f,2.79603f,-0.284202f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,2.1978f,2.79603f,2.79603f,-0.284202f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,0.212199f,2.57965f,2.79603f,-0.284202f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
	-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213f,-0.424213,
};
const int64_t label = 9;

// for test
int main()
{
  float* dataset = new float[kTrainBatchSize * 28 * 28];
  int64_t* targetset = new int64_t[kTrainBatchSize];

  for (int i = 0; i < kTrainBatchSize; ++i) {
    std::memcpy(dataset + i * 28 * 28, sample, sizeof(sample));
    targetset[i] = label;
  }

  init();
  train(dataset, targetset, kTrainBatchSize);

  return 0;
}